!function(g,I){"object"==typeof exports&&"undefined"!=typeof module?I(exports):"function"==typeof define&&define.amd?define(["exports"],I):I((g="undefined"!=typeof globalThis?globalThis:g||self).VectorTextProtocol={})}(this,(function(g){"use strict";function I(g){if(g.__esModule)return g;var I=g.default;if("function"==typeof I){var C=function g(){if(this instanceof g){var C=[null];return C.push.apply(C,arguments),new(Function.bind.apply(I,C))}return I.apply(this,arguments)};C.prototype=I.prototype}else C={};return Object.defineProperty(C,"__esModule",{value:!0}),Object.keys(g).forEach((function(I){var A=Object.getOwnPropertyDescriptor(g,I);Object.defineProperty(C,I,A.get?A:{enumerable:!0,get:function(){return g[I]}})})),C}function C(g){return new Function("d","return {"+g.map((function(g,I){return JSON.stringify(g)+": d["+I+"]"})).join(",")+"}")}function A(g){var I=new RegExp('["'+g+"\n]"),A=g.charCodeAt(0);function l(g,I){var C,l,b={},c={},o=[],Z=g.length,d=0,G=0;function n(){if(d>=Z)return c;if(l)return l=!1,b;var I,C=d;if(34===g.charCodeAt(C)){for(var o=C;o++<Z;)if(34===g.charCodeAt(o)){if(34!==g.charCodeAt(o+1))break;++o}return d=o+2,13===(I=g.charCodeAt(o+1))?(l=!0,10===g.charCodeAt(o+2)&&++d):10===I&&(l=!0),g.slice(C+1,o).replace(/""/g,'"')}for(;d<Z;){var G=1;if(10===(I=g.charCodeAt(d++)))l=!0;else if(13===I)l=!0,10===g.charCodeAt(d)&&(++d,++G);else if(I!==A)continue;return g.slice(C,d-G)}return g.slice(C)}for(;(C=n())!==c;){for(var e=[];C!==b&&C!==c;)e.push(C),C=n();I&&null==(e=I(e,G++))||o.push(e)}return o}function b(I){return I.map(c).join(g)}function c(g){return null==g?"":I.test(g+="")?'"'+g.replace(/\"/g,'""')+'"':g}return{parse:function(g,I){var A,b,c=l(g,(function(g,l){if(A)return A(g,l-1);b=g,A=I?function(g,I){var A=C(g);return function(C,l){return I(A(C),l,g)}}(g,I):C(g)}));return c.columns=b,c},parseRows:l,format:function(I,C){return null==C&&(C=function(g){var I=Object.create(null),C=[];return g.forEach((function(g){for(var A in g)A in I||C.push(I[A]=A)})),C}(I)),[C.map(c).join(g)].concat(I.map((function(I){return C.map((function(g){return c(I[g])})).join(g)}))).join("\n")},formatRows:function(g){return g.map(b).join("\n")}}}var l=A(","),b=l.parse,c=l.parseRows,o=l.format,Z=l.formatRows,d=A("\t"),G=d.parse,n=d.parseRows,e=d.format,t=d.formatRows,s=I(Object.freeze({__proto__:null,dsvFormat:A,csvParse:b,csvParseRows:c,csvFormat:o,csvFormatRows:Z,tsvParse:G,tsvParseRows:n,tsvFormat:e,tsvFormatRows:t})),m={};function i(g,I){var C=B(g,I);return C.whole+"° "+(C.minutes?C.minutes+"' ":"")+(C.seconds?C.seconds+'" ':"")+C.dir}function B(g,I){var C=({lat:["N","S"],lon:["E","W"]}[I]||"")[g>=0?0:1],A=Math.abs(g),l=Math.floor(A),b=60*(A-l),c=Math.floor(b);return{whole:l,minutes:c,seconds:Math.floor(60*(b-c)),dir:C}}function W(g,I){if(I||(I="NSEW"),"string"!=typeof g)return null;var C=(g=g.toUpperCase()).match(/^[\s\,]*([NSEW])?\s*([\-|\—|\―]?[0-9.]+)[°º˚]?\s*(?:([0-9.]+)['’′‘]\s*)?(?:([0-9.]+)(?:''|"|”|″)\s*)?([NSEW])?/);if(!C)return null;var A,l=C[0];if(C[1]&&C[5]?(A=C[1],l=l.slice(0,-1)):A=C[1]||C[5],A&&-1===I.indexOf(A))return null;var b=C[2]?parseFloat(C[2]):0,c=C[3]?parseFloat(C[3])/60:0,o=C[4]?parseFloat(C[4])/3600:0,Z=b<0?-1:1;return"S"!==A&&"W"!==A||(Z*=-1),{val:(Math.abs(b)+c+o)*Z,dim:A,matched:l,remain:g.slice(l.length)}}({get exports(){return m},set exports(g){m=g}}).exports=function(g,I){var C=W(g,I);return null===C?null:C.val},m.pair=function(g,I){var C=W(g=g.trim(),I);if(!C)return null;var A=W(g=C.remain.trim(),I);if(!A||A.remain)return null;return C.dim?function(g,I,C){if("N"===C||"S"===C)return[g,I];if("W"===C||"E"===C)return[I,g]}(C.val,A.val,C.dim):[C.val,A.val]},m.format=i,m.formatPair=function(g){return i(g.lat,"lat")+" "+i(g.lon,"lon")},m.coordToDMS=B;var J=s,a=m,u=/(Lat)(itude)?/gi,S=/(L)(on|ng)(gitude)?/i;function V(g,I){var C,A,l;for(var b in g)(A=b.match(I))&&(!C||A[0].length/b.length>l)&&(l=A[0].length/b.length,C=b);return C}function k(g){return V(g,u)}function y(g){return V(g,S)}function h(g){return"object"==typeof g?Object.keys(g).length:0}function X(g){var I=[];return[",",";","\t","|"].forEach((function(C){var A=J.dsvFormat(C).parse(g);if(A.length>=1){for(var l=h(A[0]),b=0;b<A.length;b++)if(h(A[b])!==l)return;I.push({delimiter:C,arity:Object.keys(A[0]).length})}})),I.length?I.sort((function(g,I){return I.arity-g.arity}))[0].delimiter:null}var K={isLon:function(g){return!!g.match(S)},isLat:function(g){return!!g.match(u)},guessLatHeader:k,guessLonHeader:y,csv:J.csvParse,tsv:J.tsvParse,dsv:J,auto:function(g){var I=X(g);return I?function(g){return delete g.columns,g}(J.dsvFormat(I).parse(g)):null},csv2geojson:function(g,I,C){C||(C=I,I={}),I.delimiter=I.delimiter||",";var A=I.latfield||"",l=I.lonfield||"",b=I.crs||"",c=[],o={type:"FeatureCollection",features:c};if(""!==b&&(o.crs={type:"name",properties:{name:b}}),"auto"!==I.delimiter||"string"!=typeof g||(I.delimiter=X(g),I.delimiter)){var Z=I.numericFields?I.numericFields.split(","):null,d="string"==typeof g?J.dsvFormat(I.delimiter).parse(g,(function(g){if(Z)for(var I in g)Z.includes(I)&&(g[I]=+g[I]);return g})):g;if(d.length){var G,n=[];if(A||(A=k(d[0])),l||(l=y(d[0])),!A||!l){for(G=0;G<d.length;G++)c.push({type:"Feature",properties:d[G],geometry:null});C(n.length?n:null,o)}else{for(G=0;G<d.length;G++)if(void 0!==d[G][l]&&void 0!==d[G][A]){var e,t,s,m=d[G][l],i=d[G][A];(s=a(m,"EW"))&&(m=s),(s=a(i,"NS"))&&(i=s),e=parseFloat(m),t=parseFloat(i),isNaN(e)||isNaN(t)?n.push({message:"A row contained an invalid value for latitude or longitude",row:d[G],index:G}):(I.includeLatLon||(delete d[G][l],delete d[G][A]),c.push({type:"Feature",properties:d[G],geometry:{type:"Point",coordinates:[parseFloat(e),parseFloat(t)]}}))}C(n.length?n:null,o)}}else C(null,o)}else C({type:"Error",message:"Could not autodetect delimiter"})},toLine:function(g){for(var I=g.features,C={type:"Feature",geometry:{type:"LineString",coordinates:[]}},A=0;A<I.length;A++)C.geometry.coordinates.push(I[A].geometry.coordinates);return C.properties=I.reduce((function(g,I){for(var C in I.properties)g[C]||(g[C]=[]),g[C].push(I.properties[C]);return g}),{}),{type:"FeatureCollection",features:[C]}},toPolygon:function(g){for(var I=g.features,C={type:"Feature",geometry:{type:"Polygon",coordinates:[[]]}},A=0;A<I.length;A++)C.geometry.coordinates[0].push(I[A].geometry.coordinates);return C.properties=I.reduce((function(g,I){for(var C in I.properties)g[C]||(g[C]=[]),g[C].push(I.properties[C]);return g}),{}),{type:"FeatureCollection",features:[C]}}};function p(g){return g}function H(g,I){var C=I.id,A=I.bbox,l=null==I.properties?{}:I.properties,b=function(g,I){var C=function(g){if(null==g)return p;var I,C,A=g.scale[0],l=g.scale[1],b=g.translate[0],c=g.translate[1];return function(g,o){o||(I=C=0);var Z=2,d=g.length,G=new Array(d);for(G[0]=(I+=g[0])*A+b,G[1]=(C+=g[1])*l+c;Z<d;)G[Z]=g[Z],++Z;return G}}(g.transform),A=g.arcs;function l(g,I){I.length&&I.pop();for(var l=A[g<0?~g:g],b=0,c=l.length;b<c;++b)I.push(C(l[b],b));g<0&&function(g,I){for(var C,A=g.length,l=A-I;l<--A;)C=g[l],g[l++]=g[A],g[A]=C}(I,c)}function b(g){return C(g)}function c(g){for(var I=[],C=0,A=g.length;C<A;++C)l(g[C],I);return I.length<2&&I.push(I[0]),I}function o(g){for(var I=c(g);I.length<4;)I.push(I[0]);return I}function Z(g){return g.map(o)}function d(g){var I,C=g.type;switch(C){case"GeometryCollection":return{type:C,geometries:g.geometries.map(d)};case"Point":I=b(g.coordinates);break;case"MultiPoint":I=g.coordinates.map(b);break;case"LineString":I=c(g.arcs);break;case"MultiLineString":I=g.arcs.map(c);break;case"Polygon":I=Z(g.arcs);break;case"MultiPolygon":I=g.arcs.map(Z);break;default:return null}return{type:C,coordinates:I}}return d(I)}(g,I);return null==C&&null==A?{type:"Feature",properties:l,geometry:b}:null==A?{type:"Feature",id:C,properties:l,geometry:b}:{type:"Feature",id:C,bbox:A,properties:l,geometry:b}}function r(g,I){return Array.from(g.getElementsByTagName(I))}function R(g){return"#"===g[0]?g:`#${g}`}function Y(g){return g?.normalize(),g&&g.textContent||""}function w(g,I,C){const A=g.getElementsByTagName(I),l=A.length?A[0]:null;return l&&C&&C(l),l}function v(g,I,C){const A={};if(!g)return A;const l=g.getElementsByTagName(I),b=l.length?l[0]:null;return b&&C?C(b,A):A}function N(g,I,C){const A=Y(w(g,I));return A&&C&&C(A)||{}}function F(g,I,C){const A=parseFloat(Y(w(g,I)));if(!isNaN(A))return A&&C&&C(A)||{}}function z(g,I,C){const A=parseFloat(Y(w(g,I)));if(!isNaN(A))return A&&C&&C(A),A}function f(g,I){const C={};for(const A of I)N(g,A,(g=>{C[A]=g}));return C}function L(g){return 1===g?.nodeType}function x(g){return v(g,"line",(g=>Object.assign({},N(g,"color",(g=>({stroke:`#${g}`}))),F(g,"opacity",(g=>({"stroke-opacity":g}))),F(g,"width",(g=>({"stroke-width":96*g/25.4}))))))}function Q(g){let I=[];if(null===g)return I;for(const C of Array.from(g.childNodes)){if(!L(C))continue;const g=T(C.nodeName);if("gpxtpx:TrackPointExtension"===g)I=I.concat(Q(C));else{const A=Y(C);I.push([g,U(A)])}}return I}function T(g){return["heart","gpxtpx:hr","hr"].includes(g)?"heart":g}function U(g){const I=parseFloat(g);return isNaN(I)?g:I}function j(g){const I=[parseFloat(g.getAttribute("lon")||""),parseFloat(g.getAttribute("lat")||"")];if(isNaN(I[0])||isNaN(I[1]))return null;z(g,"ele",(g=>{I.push(g)}));const C=w(g,"time");return{coordinates:I,time:C?Y(C):null,extendedValues:Q(w(g,"extensions"))}}function O(g){const I=f(g,["name","cmt","desc","type","time","keywords"]),C=Array.from(g.getElementsByTagNameNS("http://www.garmin.com/xmlschemas/GpxExtensions/v3","*"));for(const A of C)A.parentNode?.parentNode===g&&(I[A.tagName.replace(":","_")]=Y(A));const A=r(g,"link");return A.length&&(I.links=A.map((g=>Object.assign({href:g.getAttribute("href")},f(g,["text","type"]))))),I}function M(g,I){const C=r(g,I),A=[],l=[],b={};for(let g=0;g<C.length;g++){const I=j(C[g]);if(I){A.push(I.coordinates),I.time&&l.push(I.time);for(const[A,l]of I.extendedValues){const I="heart"===A?A:A.replace("gpxtpx:","")+"s";b[I]||(b[I]=Array(C.length).fill(null)),b[I][g]=l}}}if(!(A.length<2))return{line:A,times:l,extendedValues:b}}function P(g){const I=M(g,"rtept");if(I)return{type:"Feature",properties:Object.assign({_gpxType:"rte"},O(g),x(w(g,"extensions"))),geometry:{type:"LineString",coordinates:I.line}}}function D(g){const I=r(g,"trkseg"),C=[],A=[],l=[];for(const g of I){const I=M(g,"trkpt");I&&(l.push(I),I.times&&I.times.length&&A.push(I.times))}if(0===l.length)return null;const b=l.length>1,c=Object.assign({_gpxType:"trk"},O(g),x(w(g,"extensions")),A.length?{coordinateProperties:{times:b?A:A[0]}}:{});for(const g of l){C.push(g.line),c.coordinateProperties||(c.coordinateProperties={});const I=c.coordinateProperties,A=Object.entries(g.extendedValues);for(let g=0;g<A.length;g++){const[C,c]=A[g];b?(I[C]||(I[C]=l.map((g=>new Array(g.line.length).fill(null)))),I[C][g]=c):I[C]=c}}return{type:"Feature",properties:c,geometry:b?{type:"MultiLineString",coordinates:C}:{type:"LineString",coordinates:C[0]}}}function E(g){const I=Object.assign(O(g),f(g,["sym"])),C=j(g);return C?{type:"Feature",properties:I,geometry:{type:"Point",coordinates:C.coordinates}}:null}function*q(g){for(const I of r(g,"trk")){const g=D(I);g&&(yield g)}for(const I of r(g,"rte")){const g=P(I);g&&(yield g)}for(const I of r(g,"wpt")){const g=E(I);g&&(yield g)}}const _="http://www.garmin.com/xmlschemas/ActivityExtension/v2",$=[["heartRate","heartRates"],["Cadence","cadences"],["Speed","speeds"],["Watts","watts"]],gg=[["TotalTimeSeconds","totalTimeSeconds"],["DistanceMeters","distanceMeters"],["MaximumSpeed","maxSpeed"],["AverageHeartRateBpm","avgHeartRate"],["MaximumHeartRateBpm","maxHeartRate"],["AvgSpeed","avgSpeed"],["AvgWatts","avgWatts"],["MaxWatts","maxWatts"]];function Ig(g,I){const C=[];for(const[A,l]of I){let I=w(g,A);if(!I){const C=g.getElementsByTagNameNS(_,A);C.length&&(I=C[0])}const b=parseFloat(Y(I));isNaN(b)||C.push([l,b])}return C}function Cg(g){const I=[z(g,"LongitudeDegrees"),z(g,"LatitudeDegrees")];if(void 0===I[0]||isNaN(I[0])||void 0===I[1]||isNaN(I[1]))return null;const C=w(g,"HeartRateBpm"),A=Y(w(g,"Time"));return w(g,"AltitudeMeters",(g=>{const C=parseFloat(Y(g));isNaN(C)||I.push(C)})),{coordinates:I,time:A||null,heartRate:C?parseFloat(Y(C)):null,extensions:Ig(g,$)}}function Ag(g){const I=r(g,"Trackpoint"),C=[],A=[],l=[];if(I.length<2)return null;const b={},c={extendedProperties:b};for(let g=0;g<I.length;g++){const c=Cg(I[g]);if(null===c)continue;C.push(c.coordinates);const{time:o,heartRate:Z,extensions:d}=c;o&&A.push(o),Z&&l.push(Z);for(const[C,A]of d)b[C]||(b[C]=Array(I.length).fill(null)),b[C][g]=A}return C.length<2?null:Object.assign(c,{line:C,times:A,heartRates:l})}function lg(g){const I=r(g,"Track"),C=[],A=[],l=[],b=[];let c;const o=Object.assign(Object.fromEntries(Ig(g,gg)),v(g,"Name",(g=>({name:Y(g)}))));for(const g of I)c=Ag(g),c&&(C.push(c.line),c.times.length&&A.push(c.times),c.heartRates.length&&l.push(c.heartRates),b.push(c.extendedProperties));for(let g=0;g<b.length;g++){const A=b[g];for(const l in A)1===I.length?c&&(o[l]=c.extendedProperties[l]):(o[l]||(o[l]=C.map((g=>Array(g.length).fill(null)))),o[l][g]=A[l])}return 0===C.length?null:((A.length||l.length)&&(o.coordinateProperties=Object.assign(A.length?{times:1===C.length?A[0]:A}:{},l.length?{heart:1===C.length?l[0]:l}:{})),{type:"Feature",properties:o,geometry:1===C.length?{type:"LineString",coordinates:C[0]}:{type:"MultiLineString",coordinates:C}})}function*bg(g){for(const I of r(g,"Lap")){const g=lg(I);g&&(yield g)}for(const I of r(g,"Courses")){const g=lg(I);g&&(yield g)}}function cg(g,I){const C={},A="stroke"==I||"fill"===I?I:I+"-color";return"#"===g[0]&&(g=g.substring(1)),6===g.length||3===g.length?C[A]="#"+g:8===g.length&&(C[I+"-opacity"]=parseInt(g.substring(0,2),16)/255,C[A]="#"+g.substring(6,8)+g.substring(4,6)+g.substring(2,4)),C}function og(g,I,C){const A={};return z(g,I,(g=>{A[C]=g})),A}function Zg(g,I){return v(g,"color",(g=>cg(Y(g),I)))}function dg(g){return v(g,"Icon",((g,I)=>(N(g,"href",(g=>{I.icon=g})),I)))}function Gg(g){return Object.assign({},function(g){return v(g,"PolyStyle",((g,I)=>Object.assign(I,v(g,"color",(g=>cg(Y(g),"fill"))),N(g,"fill",(g=>{if("0"===g)return{"fill-opacity":0}})),N(g,"outline",(g=>{if("0"===g)return{"stroke-opacity":0}})))))}(g),function(g){return v(g,"LineStyle",(g=>Object.assign(Zg(g,"stroke"),og(g,"width","stroke-width"))))}(g),function(g){return v(g,"LabelStyle",(g=>Object.assign(Zg(g,"label"),og(g,"scale","label-scale"))))}(g),function(g){return v(g,"IconStyle",(g=>Object.assign(Zg(g,"icon"),og(g,"scale","icon-scale"),og(g,"heading","icon-heading"),v(g,"hotSpot",(g=>{const I=parseFloat(g.getAttribute("x")||""),C=parseFloat(g.getAttribute("y")||""),A=g.getAttribute("xunits")||"",l=g.getAttribute("yunits")||"";return isNaN(I)||isNaN(C)?{}:{"icon-offset":[I,C],"icon-offset-units":[A,l]}})),dg(g))))}(g))}const ng=g=>Number(g),eg={string:g=>g,int:ng,uint:ng,short:ng,ushort:ng,float:ng,double:ng,bool:g=>Boolean(g)};function tg(g,I){return v(g,"ExtendedData",((g,C)=>{for(const I of r(g,"Data"))C[I.getAttribute("name")||""]=Y(w(I,"value"));for(const A of r(g,"SimpleData")){const g=A.getAttribute("name")||"",l=I[g]||eg.string;C[g]=l(Y(A))}return C}))}function sg(g){const I=w(g,"description");for(const g of Array.from(I?.childNodes||[]))if(4===g.nodeType)return{description:{"@type":"html",value:Y(g)}};return{}}function mg(g){return v(g,"TimeSpan",(g=>({timespan:{begin:Y(w(g,"begin")),end:Y(w(g,"end"))}})))}function ig(g){return v(g,"TimeStamp",(g=>({timestamp:Y(w(g,"when"))})))}function Bg(g,I){return N(g,"styleUrl",(g=>(g=R(g),I[g]?Object.assign({styleUrl:g},I[g]):{styleUrl:g})))}const Wg=/\s*/g,Jg=/^\s*|\s*$/g,ag=/\s+/;function ug(g){return g.replace(Wg,"").split(",").map(parseFloat).filter((g=>!isNaN(g))).slice(0,3)}function Sg(g){return g.replace(Jg,"").split(ag).map(ug).filter((g=>g.length>=2))}function Vg(g){let I=r(g,"coord");0===I.length&&(I=function(g,I,C){return Array.from(g.getElementsByTagNameNS(C,I))}(g,"coord","*"));const C=I.map((g=>Y(g).split(" ").map(parseFloat)));return 0===C.length?null:{geometry:C.length>2?{type:"LineString",coordinates:C}:{type:"Point",coordinates:C[0]},times:r(g,"when").map((g=>Y(g)))}}function kg(g){if(0===g.length)return g;const I=g[0],C=g[g.length-1];let A=!0;for(let g=0;g<Math.max(I.length,C.length);g++)if(I[g]!==C[g]){A=!1;break}return A?g:g.concat([g[0]])}function yg(g){return Y(w(g,"coordinates"))}function hg(g){let I=[],C=[];for(let A=0;A<g.childNodes.length;A++){const l=g.childNodes.item(A);if(L(l))switch(l.tagName){case"MultiGeometry":case"MultiTrack":case"gx:MultiTrack":{const g=hg(l);I=I.concat(g.geometries),C=C.concat(g.coordTimes);break}case"Point":{const g=ug(yg(l));g.length>=2&&I.push({type:"Point",coordinates:g});break}case"LinearRing":case"LineString":{const g=Sg(yg(l));g.length>=2&&I.push({type:"LineString",coordinates:g});break}case"Polygon":{const g=[];for(const I of r(l,"LinearRing")){const C=kg(Sg(yg(I)));C.length>=4&&g.push(C)}g.length&&I.push({type:"Polygon",coordinates:g});break}case"Track":case"gx:Track":{const g=Vg(l);if(!g)break;const{times:A,geometry:b}=g;I.push(b),A.length&&C.push(A);break}}}return{geometries:I,coordTimes:C}}function Xg(g){return 0===g.length?null:1===g.length?g[0]:{type:"GeometryCollection",geometries:g}}function Kg(g,I,C){const{coordTimes:A,geometries:l}=hg(g),b={type:"Feature",geometry:Xg(l),properties:Object.assign(f(g,["name","address","visibility","open","phoneNumber","description"]),sg(g),Bg(g,I),Gg(g),tg(g,C),mg(g),ig(g),A.length?{coordinateProperties:{times:1===A.length?A[0]:A}}:{})};void 0!==b.properties?.visibility&&(b.properties.visibility="0"!==b.properties.visibility);const c=g.getAttribute("id");return null!==c&&""!==c&&(b.id=c),b}function pg(g){if(w(g,"gx:LatLonQuad")){return{type:"Polygon",coordinates:[kg(Sg(yg(g)))]}}return function(g){const I=w(g,"LatLonBox");if(I){const g=z(I,"north"),C=z(I,"west"),A=z(I,"east"),l=z(I,"south"),b=z(I,"rotation");if("number"==typeof g&&"number"==typeof l&&"number"==typeof C&&"number"==typeof A){let I=[[[C,g],[A,g],[A,l],[C,l],[C,g]]];return"number"==typeof b&&(I=function(g,I,C){const A=[(g[0]+g[2])/2,(g[1]+g[3])/2];return[I[0].map((g=>{const I=g[1]-A[1],l=g[0]-A[0],b=Math.sqrt(Math.pow(I,2)+Math.pow(l,2)),c=Math.atan2(I,l)-C*Hg;return[A[0]+Math.cos(c)*b,A[1]+Math.sin(c)*b]}))]}([C,l,A,g],I,b)),{type:"Polygon",coordinates:I}}}return null}(g)}const Hg=Math.PI/180;function rg(g,I,C){const A={type:"Feature",geometry:pg(g),properties:Object.assign({"@geometry-type":"groundoverlay"},f(g,["name","address","visibility","open","phoneNumber","description"]),sg(g),Bg(g,I),Gg(g),dg(g),tg(g,C),mg(g),ig(g))};void 0!==A.properties?.visibility&&(A.properties.visibility="0"!==A.properties.visibility);const l=g.getAttribute("id");return null!==l&&""!==l&&(A.id=l),A}function Rg(g){let I=g.getAttribute("id");const C=g.parentNode;return!I&&L(C)&&"CascadingStyle"===C.localName&&(I=C.getAttribute("kml:id")||C.getAttribute("id")),R(I||"")}function Yg(g){const I={};for(const C of r(g,"Style"))I[Rg(C)]=Gg(C);for(const C of r(g,"StyleMap")){const g=R(C.getAttribute("id")||"");N(C,"styleUrl",(C=>{C=R(C),I[C]&&(I[g]=I[C])}))}return I}function wg(g){const I={};for(const C of r(g,"SimpleField"))I[C.getAttribute("name")||""]=eg[C.getAttribute("type")||""]||eg.string;return I}const vg=["name","visibility","open","address","description","phoneNumber","visibility"];function*Ng(g){const I=Yg(g),C=wg(g);for(const A of r(g,"Placemark")){const g=Kg(A,I,C);g&&(yield g)}for(const A of r(g,"GroundOverlay")){const g=rg(A,I,C);g&&(yield g)}}var Fg=Object.freeze({__proto__:null,gpx:function(g){return{type:"FeatureCollection",features:Array.from(q(g))}},gpxGen:q,kml:function(g){return{type:"FeatureCollection",features:Array.from(Ng(g))}},kmlGen:Ng,kmlWithFolders:function(g){const I=Yg(g),C=wg(g),A={type:"root",children:[]};return function g(A,l){if(L(A))switch(A.tagName){case"GroundOverlay":{const g=rg(A,I,C);g&&l.children.push(g);break}case"Placemark":{const g=Kg(A,I,C);g&&l.children.push(g);break}case"Folder":{const g=function(g){const I={};for(const C of Array.from(g.childNodes))L(C)&&vg.includes(C.tagName)&&(I[C.tagName]=Y(C));return{type:"folder",meta:I,children:[]}}(A);l.children.push(g),l=g;break}}if(A.childNodes)for(let I=0;I<A.childNodes.length;I++)g(A.childNodes[I],l)}(g,A),A},tcx:function(g){return{type:"FeatureCollection",features:Array.from(bg(g))}},tcxGen:bg});const zg=["topojson","kml","gpx","tcx","csv","tsv"];class fg{constructor(g,I){this.blankGeoJSON=()=>({type:"FeatureCollection",features:[]}),this._rawData=I,this._format=g;const C={topojson:this.loadTopoJson,kml:this.loadXml,gpx:this.loadXml,tcx:this.loadXml,csv:this.loadCsv,tsv:this.loadCsv};this._conversionFn=C[g]}async convert(){return this._conversionFn?this._conversionFn():new Promise(((g,I)=>I(`No converter exists for ${this._format}`)))}async loadXml(){return Fg[this._format]((new DOMParser).parseFromString(this._rawData,"text/xml"))}async loadCsv(){let g={};"tsv"===this._format&&(g.delimiter="\t");return await new Promise(((I,C)=>{K.csv2geojson(this._rawData,g,((g,A)=>{g?C(g):I(A)}))}))}async loadTopoJson(){let g={};try{g=JSON.parse(this._rawData)}catch(g){throw"Invalid TopoJson"}let I=this.blankGeoJSON();return"Topology"===g.type&&void 0!==g.objects&&(I={type:"FeatureCollection",features:I.features=Object.keys(g.objects).map((I=>{return C=g,"string"==typeof(A=I)&&(A=C.objects[A]),"GeometryCollection"===A.type?{type:"FeatureCollection",features:A.geometries.map((function(g){return H(C,g)}))}:H(C,A);var C,A})).reduce(((g,I)=>[...g,...I.features]),[])}),I}}var Lg=null;try{var xg="undefined"!=typeof module&&"function"==typeof module.require&&module.require("worker_threads")||"function"==typeof __non_webpack_require__&&__non_webpack_require__("worker_threads")||"function"==typeof require&&require("worker_threads");Lg=xg.Worker}catch(g){}function Qg(g,I,C){var A=void 0===I?null:I,l=function(g,I){return Buffer.from(g,"base64").toString(I?"utf16":"utf8")}(g,void 0!==C&&C),b=l.indexOf("\n",10)+1,c=l.substring(b)+(A?"//# sourceMappingURL="+A:"");return function(g){return new Lg(c,Object.assign({},g,{eval:!0}))}}function Tg(g,I,C){var A=void 0===I?null:I,l=function(g,I){var C=atob(g);if(I){for(var A=new Uint8Array(C.length),l=0,b=C.length;l<b;++l)A[l]=C.charCodeAt(l);return String.fromCharCode.apply(null,new Uint16Array(A.buffer))}return C}(g,void 0!==C&&C),b=l.indexOf("\n",10)+1,c=l.substring(b)+(A?"//# sourceMappingURL="+A:""),o=new Blob([c],{type:"application/javascript"});return URL.createObjectURL(o)}var Ug="[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0);var jg,Og,Mg,Pg=(jg="",Og=null,Mg=!1,Ug?Qg(jg,Og,Mg):function(g,I,C){var A;return function(l){return A=A||Tg(g,I,C),new Worker(A,l)}}(jg,Og,Mg));const Dg=()=>Math.random().toString(36).substring(2);class Eg{constructor(g,I){this.initId=Dg()+"-"+g,this.worker=new Pg,this.handlers=new Map,this.worker.onmessage=I=>{const C=I.data,A=this.handlers.get(C.id),l=this;if(A){if("response"===C.type&&A.resolve(C.message),"error"===C.type){const I=C.error||new Error(`Unknown error with ${g}`);A.reject(I)}"init_response"===C.type&&(this._=Object.keys(C.message).map((g=>{const I="function"==typeof C.message[g];return[g,function(){return I?l.exec(g)(...arguments):l.get(g)}]})).reduce(((g,I)=>({...g,[I[0]]:I[1]})),{}),A.resolve(this._))}},this.worker.postMessage({type:"init",id:this.initId,command:g,message:I})}onLoad(){return new Promise((g=>{void 0===this._?this.handlers.set(this.initId,{resolve:g,reject:g}):g(this._)}))}exec(g){const I=this;return function(...C){return new Promise(((A,l)=>{const b=Dg()+"-"+g;I.handlers.set(b,{resolve:A,reject:l}),I.worker.postMessage({type:"exec",id:b,command:g,message:[...C]})}))}}get(g){return new Promise(((I,C)=>{const A=Dg()+"-"+g;this.handlers.set(A,{resolve:I,reject:C}),this.worker.postMessage({type:"get",id:A,command:g,message:[]})}))}}const qg="test://http://example.com"!==new URL("test://http://example.com").href,_g=(g,I)=>{const C=new AbortController,A=g.url.split("://")[0],l=g.url.replace(new RegExp(`^${A}://`),""),b=qg?(g=>{const I=new RegExp("^(https?)(//)");return g.replace(I,"$1:$2")})(l):l;return b&&fetch(b,{signal:C.signal}).then((g=>{200==g.status?g.text().then((g=>{let C,l;["kml","tcx","gpx"].indexOf(A)>=0||!(()=>{let g=!1;try{g="function"==typeof window.Worker}catch(I){g=!1}return g})()?(C=new fg(A,g),l=C.convert()):(C=new Eg("Converter",[A,g]),l=C.exec("convert")()),l.then((g=>{I(null,g,null,null)})).catch((g=>{I(g)}))})):I(new Error(`Data fetch error: ${g.statusText}`))})).catch((g=>{I(new Error(g))})),{cancel:()=>{C.abort()}}};g.VectorTextProtocol=_g,g.addProtocols=g=>{zg.forEach((I=>{g.addProtocol(I,_g)}))},Object.defineProperty(g,"__esModule",{value:!0})}));
//# sourceMappingURL=maplibre-gl-vector-text-protocol.min.js.map
