!function(g,C){"object"==typeof exports&&"undefined"!=typeof module?C(exports):"function"==typeof define&&define.amd?define(["exports"],C):C((g="undefined"!=typeof globalThis?globalThis:g||self).VectorTextProtocol={})}(this,(function(g){"use strict";function C(g){return g&&g.__esModule&&Object.prototype.hasOwnProperty.call(g,"default")?g.default:g}function I(g){if(g.__esModule)return g;var C=g.default;if("function"==typeof C){var I=function g(){if(this instanceof g){var I=[null];return I.push.apply(I,arguments),new(Function.bind.apply(C,I))}return C.apply(this,arguments)};I.prototype=C.prototype}else I={};return Object.defineProperty(I,"__esModule",{value:!0}),Object.keys(g).forEach((function(C){var A=Object.getOwnPropertyDescriptor(g,C);Object.defineProperty(I,C,A.get?A:{enumerable:!0,get:function(){return g[C]}})})),I}function A(g){return new Function("d","return {"+g.map((function(g,C){return JSON.stringify(g)+": d["+C+"]"})).join(",")+"}")}function l(g){var C=new RegExp('["'+g+"\n]"),I=g.charCodeAt(0);function l(g,C){var A,l,b={},c={},o=[],Z=g.length,d=0,G=0;function s(){if(d>=Z)return c;if(l)return l=!1,b;var C,A=d;if(34===g.charCodeAt(A)){for(var o=A;o++<Z;)if(34===g.charCodeAt(o)){if(34!==g.charCodeAt(o+1))break;++o}return d=o+2,13===(C=g.charCodeAt(o+1))?(l=!0,10===g.charCodeAt(o+2)&&++d):10===C&&(l=!0),g.slice(A+1,o).replace(/""/g,'"')}for(;d<Z;){var G=1;if(10===(C=g.charCodeAt(d++)))l=!0;else if(13===C)l=!0,10===g.charCodeAt(d)&&(++d,++G);else if(C!==I)continue;return g.slice(A,d-G)}return g.slice(A)}for(;(A=s())!==c;){for(var e=[];A!==b&&A!==c;)e.push(A),A=s();C&&null==(e=C(e,G++))||o.push(e)}return o}function b(C){return C.map(c).join(g)}function c(g){return null==g?"":C.test(g+="")?'"'+g.replace(/\"/g,'""')+'"':g}return{parse:function(g,C){var I,b,c=l(g,(function(g,l){if(I)return I(g,l-1);b=g,I=C?function(g,C){var I=A(g);return function(A,l){return C(I(A),l,g)}}(g,C):A(g)}));return c.columns=b,c},parseRows:l,format:function(C,I){return null==I&&(I=function(g){var C=Object.create(null),I=[];return g.forEach((function(g){for(var A in g)A in C||I.push(C[A]=A)})),I}(C)),[I.map(c).join(g)].concat(C.map((function(C){return I.map((function(g){return c(C[g])})).join(g)}))).join("\n")},formatRows:function(g){return g.map(b).join("\n")}}}var b=l(","),c=b.parse,o=b.parseRows,Z=b.format,d=b.formatRows,G=l("\t"),s=G.parse,e=G.parseRows,n=G.format,t=G.formatRows,m=I(Object.freeze({__proto__:null,dsvFormat:l,csvParse:c,csvParseRows:o,csvFormat:Z,csvFormatRows:d,tsvParse:s,tsvParseRows:e,tsvFormat:n,tsvFormatRows:t})),B={exports:{}};function i(g,C){var I=W(g,C);return I.whole+"° "+(I.minutes?I.minutes+"' ":"")+(I.seconds?I.seconds+'" ':"")+I.dir}function W(g,C){var I=({lat:["N","S"],lon:["E","W"]}[C]||"")[g>=0?0:1],A=Math.abs(g),l=Math.floor(A),b=60*(A-l),c=Math.floor(b);return{whole:l,minutes:c,seconds:Math.floor(60*(b-c)),dir:I}}function J(g,C){if(C||(C="NSEW"),"string"!=typeof g)return null;var I=(g=g.toUpperCase()).match(/^[\s\,]*([NSEW])?\s*([\-|\—|\―]?[0-9.]+)[°º˚]?\s*(?:([0-9.]+)['’′‘]\s*)?(?:([0-9.]+)(?:''|"|”|″)\s*)?([NSEW])?/);if(!I)return null;var A,l=I[0];if(I[1]&&I[5]?(A=I[1],l=l.slice(0,-1)):A=I[1]||I[5],A&&-1===C.indexOf(A))return null;var b=I[2]?parseFloat(I[2]):0,c=I[3]?parseFloat(I[3])/60:0,o=I[4]?parseFloat(I[4])/3600:0,Z=b<0?-1:1;return"S"!==A&&"W"!==A||(Z*=-1),{val:(Math.abs(b)+c+o)*Z,dim:A,matched:l,remain:g.slice(l.length)}}B.exports=function(g,C){var I=J(g,C);return null===I?null:I.val},B.exports.pair=function(g,C){var I=J(g=g.trim(),C);if(!I)return null;var A=J(g=I.remain.trim(),C);if(!A||A.remain)return null;return I.dim?function(g,C,I){if("N"===I||"S"===I)return[g,C];if("W"===I||"E"===I)return[C,g]}(I.val,A.val,I.dim):[I.val,A.val]},B.exports.format=i,B.exports.formatPair=function(g){return i(g.lat,"lat")+" "+i(g.lon,"lon")},B.exports.coordToDMS=W;var a=B.exports,S=m,K=a,k=/(Lat)(itude)?/gi,u=/(L)(on|ng)(gitude)?/i;function h(g,C){var I,A,l;for(var b in g)(A=b.match(C))&&(!I||A[0].length/b.length>l)&&(l=A[0].length/b.length,I=b);return I}function y(g){return h(g,k)}function V(g){return h(g,u)}function X(g){return"object"==typeof g?Object.keys(g).length:0}function p(g){var C=[];return[",",";","\t","|"].forEach((function(I){var A=S.dsvFormat(I).parse(g);if(A.length>=1){for(var l=X(A[0]),b=0;b<A.length;b++)if(X(A[b])!==l)return;C.push({delimiter:I,arity:Object.keys(A[0]).length})}})),C.length?C.sort((function(g,C){return C.arity-g.arity}))[0].delimiter:null}var H={isLon:function(g){return!!g.match(u)},isLat:function(g){return!!g.match(k)},guessLatHeader:y,guessLonHeader:V,csv:S.csvParse,tsv:S.tsvParse,dsv:S,auto:function(g){var C=p(g);return C?function(g){return delete g.columns,g}(S.dsvFormat(C).parse(g)):null},csv2geojson:function(g,C,I){I||(I=C,C={}),C.delimiter=C.delimiter||",";var A=C.latfield||"",l=C.lonfield||"",b=C.crs||"",c=[],o={type:"FeatureCollection",features:c};if(""!==b&&(o.crs={type:"name",properties:{name:b}}),"auto"!==C.delimiter||"string"!=typeof g||(C.delimiter=p(g),C.delimiter)){var Z=C.numericFields?C.numericFields.split(","):null,d="string"==typeof g?S.dsvFormat(C.delimiter).parse(g,(function(g){if(Z)for(var C in g)Z.includes(C)&&(g[C]=+g[C]);return g})):g;if(d.length){var G,s=[];if(A||(A=y(d[0])),l||(l=V(d[0])),!A||!l){for(G=0;G<d.length;G++)c.push({type:"Feature",properties:d[G],geometry:null});I(s.length?s:null,o)}else{for(G=0;G<d.length;G++)if(void 0!==d[G][l]&&void 0!==d[G][A]){var e,n,t,m=d[G][l],B=d[G][A];(t=K(m,"EW"))&&(m=t),(t=K(B,"NS"))&&(B=t),e=parseFloat(m),n=parseFloat(B),isNaN(e)||isNaN(n)?s.push({message:"A row contained an invalid value for latitude or longitude",row:d[G],index:G}):(C.includeLatLon||(delete d[G][l],delete d[G][A]),c.push({type:"Feature",properties:d[G],geometry:{type:"Point",coordinates:[parseFloat(e),parseFloat(n)]}}))}I(s.length?s:null,o)}}else I(null,o)}else I({type:"Error",message:"Could not autodetect delimiter"})},toLine:function(g){for(var C=g.features,I={type:"Feature",geometry:{type:"LineString",coordinates:[]}},A=0;A<C.length;A++)I.geometry.coordinates.push(C[A].geometry.coordinates);return I.properties=C.reduce((function(g,C){for(var I in C.properties)g[I]||(g[I]=[]),g[I].push(C.properties[I]);return g}),{}),{type:"FeatureCollection",features:[I]}},toPolygon:function(g){for(var C=g.features,I={type:"Feature",geometry:{type:"Polygon",coordinates:[[]]}},A=0;A<C.length;A++)I.geometry.coordinates[0].push(C[A].geometry.coordinates);return I.properties=C.reduce((function(g,C){for(var I in C.properties)g[I]||(g[I]=[]),g[I].push(C.properties[I]);return g}),{}),{type:"FeatureCollection",features:[I]}}};function Y(g){return g}function R(g,C){var I=C.id,A=C.bbox,l=null==C.properties?{}:C.properties,b=function(g,C){var I=function(g){if(null==g)return Y;var C,I,A=g.scale[0],l=g.scale[1],b=g.translate[0],c=g.translate[1];return function(g,o){o||(C=I=0);var Z=2,d=g.length,G=new Array(d);for(G[0]=(C+=g[0])*A+b,G[1]=(I+=g[1])*l+c;Z<d;)G[Z]=g[Z],++Z;return G}}(g.transform),A=g.arcs;function l(g,C){C.length&&C.pop();for(var l=A[g<0?~g:g],b=0,c=l.length;b<c;++b)C.push(I(l[b],b));g<0&&function(g,C){for(var I,A=g.length,l=A-C;l<--A;)I=g[l],g[l++]=g[A],g[A]=I}(C,c)}function b(g){return I(g)}function c(g){for(var C=[],I=0,A=g.length;I<A;++I)l(g[I],C);return C.length<2&&C.push(C[0]),C}function o(g){for(var C=c(g);C.length<4;)C.push(C[0]);return C}function Z(g){return g.map(o)}function d(g){var C,I=g.type;switch(I){case"GeometryCollection":return{type:I,geometries:g.geometries.map(d)};case"Point":C=b(g.coordinates);break;case"MultiPoint":C=g.coordinates.map(b);break;case"LineString":C=c(g.arcs);break;case"MultiLineString":C=g.arcs.map(c);break;case"Polygon":C=Z(g.arcs);break;case"MultiPolygon":C=g.arcs.map(Z);break;default:return null}return{type:I,coordinates:C}}return d(C)}(g,C);return null==I&&null==A?{type:"Feature",properties:l,geometry:b}:null==A?{type:"Feature",id:I,properties:l,geometry:b}:{type:"Feature",id:I,bbox:A,properties:l,geometry:b}}function r(g,C){return Array.from(g.getElementsByTagName(C))}function w(g){return"#"===g[0]?g:`#${g}`}function v(g){return g?.normalize(),g&&g.textContent||""}function F(g,C,I){const A=g.getElementsByTagName(C),l=A.length?A[0]:null;return l&&I&&I(l),l}function N(g,C,I){const A={};if(!g)return A;const l=g.getElementsByTagName(C),b=l.length?l[0]:null;return b&&I?I(b,A):A}function z(g,C,I){const A=v(F(g,C));return A&&I&&I(A)||{}}function L(g,C,I){const A=parseFloat(v(F(g,C)));if(!isNaN(A))return A&&I&&I(A)||{}}function f(g,C,I){const A=parseFloat(v(F(g,C)));if(!isNaN(A))return A&&I&&I(A),A}function x(g,C){const I={};for(const A of C)z(g,A,(g=>{I[A]=g}));return I}function Q(g){return 1===g?.nodeType}function T(g){return N(g,"line",(g=>Object.assign({},z(g,"color",(g=>({stroke:`#${g}`}))),L(g,"opacity",(g=>({"stroke-opacity":g}))),L(g,"width",(g=>({"stroke-width":96*g/25.4}))))))}function U(g){let C=[];if(null===g)return C;for(const I of Array.from(g.childNodes)){if(!Q(I))continue;const g=M(I.nodeName);if("gpxtpx:TrackPointExtension"===g)C=C.concat(U(I));else{const A=v(I);C.push([g,O(A)])}}return C}function M(g){return["heart","gpxtpx:hr","hr"].includes(g)?"heart":g}function O(g){const C=parseFloat(g);return isNaN(C)?g:C}function j(g){const C=[parseFloat(g.getAttribute("lon")||""),parseFloat(g.getAttribute("lat")||"")];if(isNaN(C[0])||isNaN(C[1]))return null;f(g,"ele",(g=>{C.push(g)}));const I=F(g,"time");return{coordinates:C,time:I?v(I):null,extendedValues:U(F(g,"extensions"))}}function D(g){const C=x(g,["name","cmt","desc","type","time","keywords"]),I=Array.from(g.getElementsByTagNameNS("http://www.garmin.com/xmlschemas/GpxExtensions/v3","*"));for(const A of I)A.parentNode?.parentNode===g&&(C[A.tagName.replace(":","_")]=v(A));const A=r(g,"link");return A.length&&(C.links=A.map((g=>Object.assign({href:g.getAttribute("href")},x(g,["text","type"]))))),C}function P(g,C){const I=r(g,C),A=[],l=[],b={};for(let g=0;g<I.length;g++){const C=j(I[g]);if(C){A.push(C.coordinates),C.time&&l.push(C.time);for(const[A,l]of C.extendedValues){const C="heart"===A?A:A.replace("gpxtpx:","")+"s";b[C]||(b[C]=Array(I.length).fill(null)),b[C][g]=l}}}if(!(A.length<2))return{line:A,times:l,extendedValues:b}}function E(g){const C=P(g,"rtept");if(C)return{type:"Feature",properties:Object.assign({_gpxType:"rte"},D(g),T(F(g,"extensions"))),geometry:{type:"LineString",coordinates:C.line}}}function q(g){const C=r(g,"trkseg"),I=[],A=[],l=[];for(const g of C){const C=P(g,"trkpt");C&&(l.push(C),C.times&&C.times.length&&A.push(C.times))}if(0===l.length)return null;const b=l.length>1,c=Object.assign({_gpxType:"trk"},D(g),T(F(g,"extensions")),A.length?{coordinateProperties:{times:b?A:A[0]}}:{});for(const g of l){I.push(g.line),c.coordinateProperties||(c.coordinateProperties={});const C=c.coordinateProperties,A=Object.entries(g.extendedValues);for(let g=0;g<A.length;g++){const[I,c]=A[g];b?(C[I]||(C[I]=l.map((g=>new Array(g.line.length).fill(null)))),C[I][g]=c):C[I]=c}}return{type:"Feature",properties:c,geometry:b?{type:"MultiLineString",coordinates:I}:{type:"LineString",coordinates:I[0]}}}function _(g){const C=Object.assign(D(g),x(g,["sym"])),I=j(g);return I?{type:"Feature",properties:C,geometry:{type:"Point",coordinates:I.coordinates}}:null}function*$(g){for(const C of r(g,"trk")){const g=q(C);g&&(yield g)}for(const C of r(g,"rte")){const g=E(C);g&&(yield g)}for(const C of r(g,"wpt")){const g=_(C);g&&(yield g)}}const gg="http://www.garmin.com/xmlschemas/ActivityExtension/v2",Cg=[["heartRate","heartRates"],["Cadence","cadences"],["Speed","speeds"],["Watts","watts"]],Ig=[["TotalTimeSeconds","totalTimeSeconds"],["DistanceMeters","distanceMeters"],["MaximumSpeed","maxSpeed"],["AverageHeartRateBpm","avgHeartRate"],["MaximumHeartRateBpm","maxHeartRate"],["AvgSpeed","avgSpeed"],["AvgWatts","avgWatts"],["MaxWatts","maxWatts"]];function Ag(g,C){const I=[];for(const[A,l]of C){let C=F(g,A);if(!C){const I=g.getElementsByTagNameNS(gg,A);I.length&&(C=I[0])}const b=parseFloat(v(C));isNaN(b)||I.push([l,b])}return I}function lg(g){const C=[f(g,"LongitudeDegrees"),f(g,"LatitudeDegrees")];if(void 0===C[0]||isNaN(C[0])||void 0===C[1]||isNaN(C[1]))return null;const I=F(g,"HeartRateBpm"),A=v(F(g,"Time"));return F(g,"AltitudeMeters",(g=>{const I=parseFloat(v(g));isNaN(I)||C.push(I)})),{coordinates:C,time:A||null,heartRate:I?parseFloat(v(I)):null,extensions:Ag(g,Cg)}}function bg(g){const C=r(g,"Trackpoint"),I=[],A=[],l=[];if(C.length<2)return null;const b={},c={extendedProperties:b};for(let g=0;g<C.length;g++){const c=lg(C[g]);if(null===c)continue;I.push(c.coordinates);const{time:o,heartRate:Z,extensions:d}=c;o&&A.push(o),Z&&l.push(Z);for(const[I,A]of d)b[I]||(b[I]=Array(C.length).fill(null)),b[I][g]=A}return I.length<2?null:Object.assign(c,{line:I,times:A,heartRates:l})}function cg(g){const C=r(g,"Track"),I=[],A=[],l=[],b=[];let c;const o=Object.assign(Object.fromEntries(Ag(g,Ig)),N(g,"Name",(g=>({name:v(g)}))));for(const g of C)c=bg(g),c&&(I.push(c.line),c.times.length&&A.push(c.times),c.heartRates.length&&l.push(c.heartRates),b.push(c.extendedProperties));for(let g=0;g<b.length;g++){const A=b[g];for(const l in A)1===C.length?c&&(o[l]=c.extendedProperties[l]):(o[l]||(o[l]=I.map((g=>Array(g.length).fill(null)))),o[l][g]=A[l])}return 0===I.length?null:((A.length||l.length)&&(o.coordinateProperties=Object.assign(A.length?{times:1===I.length?A[0]:A}:{},l.length?{heart:1===I.length?l[0]:l}:{})),{type:"Feature",properties:o,geometry:1===I.length?{type:"LineString",coordinates:I[0]}:{type:"MultiLineString",coordinates:I}})}function*og(g){for(const C of r(g,"Lap")){const g=cg(C);g&&(yield g)}for(const C of r(g,"Courses")){const g=cg(C);g&&(yield g)}}function Zg(g,C){const I={},A="stroke"==C||"fill"===C?C:C+"-color";return"#"===g[0]&&(g=g.substring(1)),6===g.length||3===g.length?I[A]="#"+g:8===g.length&&(I[C+"-opacity"]=parseInt(g.substring(0,2),16)/255,I[A]="#"+g.substring(6,8)+g.substring(4,6)+g.substring(2,4)),I}function dg(g,C,I){const A={};return f(g,C,(g=>{A[I]=g})),A}function Gg(g,C){return N(g,"color",(g=>Zg(v(g),C)))}function sg(g){return N(g,"Icon",((g,C)=>(z(g,"href",(g=>{C.icon=g})),C)))}function eg(g){return Object.assign({},function(g){return N(g,"PolyStyle",((g,C)=>Object.assign(C,N(g,"color",(g=>Zg(v(g),"fill"))),z(g,"fill",(g=>{if("0"===g)return{"fill-opacity":0}})),z(g,"outline",(g=>{if("0"===g)return{"stroke-opacity":0}})))))}(g),function(g){return N(g,"LineStyle",(g=>Object.assign(Gg(g,"stroke"),dg(g,"width","stroke-width"))))}(g),function(g){return N(g,"LabelStyle",(g=>Object.assign(Gg(g,"label"),dg(g,"scale","label-scale"))))}(g),function(g){return N(g,"IconStyle",(g=>Object.assign(Gg(g,"icon"),dg(g,"scale","icon-scale"),dg(g,"heading","icon-heading"),N(g,"hotSpot",(g=>{const C=parseFloat(g.getAttribute("x")||""),I=parseFloat(g.getAttribute("y")||""),A=g.getAttribute("xunits")||"",l=g.getAttribute("yunits")||"";return isNaN(C)||isNaN(I)?{}:{"icon-offset":[C,I],"icon-offset-units":[A,l]}})),sg(g))))}(g))}const ng=g=>Number(g),tg={string:g=>g,int:ng,uint:ng,short:ng,ushort:ng,float:ng,double:ng,bool:g=>Boolean(g)};function mg(g,C){return N(g,"ExtendedData",((g,I)=>{for(const C of r(g,"Data"))I[C.getAttribute("name")||""]=v(F(C,"value"));for(const A of r(g,"SimpleData")){const g=A.getAttribute("name")||"",l=C[g]||tg.string;I[g]=l(v(A))}return I}))}function Bg(g){const C=F(g,"description");for(const g of Array.from(C?.childNodes||[]))if(4===g.nodeType)return{description:{"@type":"html",value:v(g)}};return{}}function ig(g){return N(g,"TimeSpan",(g=>({timespan:{begin:v(F(g,"begin")),end:v(F(g,"end"))}})))}function Wg(g){return N(g,"TimeStamp",(g=>({timestamp:v(F(g,"when"))})))}function Jg(g,C){return z(g,"styleUrl",(g=>(g=w(g),C[g]?Object.assign({styleUrl:g},C[g]):{styleUrl:g})))}const ag=/\s*/g,Sg=/^\s*|\s*$/g,Kg=/\s+/;function kg(g){return g.replace(ag,"").split(",").map(parseFloat).filter((g=>!isNaN(g))).slice(0,3)}function ug(g){return g.replace(Sg,"").split(Kg).map(kg).filter((g=>g.length>=2))}function hg(g){let C=r(g,"coord");0===C.length&&(C=function(g,C,I){return Array.from(g.getElementsByTagNameNS(I,C))}(g,"coord","*"));const I=C.map((g=>v(g).split(" ").map(parseFloat)));return 0===I.length?null:{geometry:I.length>2?{type:"LineString",coordinates:I}:{type:"Point",coordinates:I[0]},times:r(g,"when").map((g=>v(g)))}}function yg(g){if(0===g.length)return g;const C=g[0],I=g[g.length-1];let A=!0;for(let g=0;g<Math.max(C.length,I.length);g++)if(C[g]!==I[g]){A=!1;break}return A?g:g.concat([g[0]])}function Vg(g){return v(F(g,"coordinates"))}function Xg(g){let C=[],I=[];for(let A=0;A<g.childNodes.length;A++){const l=g.childNodes.item(A);if(Q(l))switch(l.tagName){case"MultiGeometry":case"MultiTrack":case"gx:MultiTrack":{const g=Xg(l);C=C.concat(g.geometries),I=I.concat(g.coordTimes);break}case"Point":{const g=kg(Vg(l));g.length>=2&&C.push({type:"Point",coordinates:g});break}case"LinearRing":case"LineString":{const g=ug(Vg(l));g.length>=2&&C.push({type:"LineString",coordinates:g});break}case"Polygon":{const g=[];for(const C of r(l,"LinearRing")){const I=yg(ug(Vg(C)));I.length>=4&&g.push(I)}g.length&&C.push({type:"Polygon",coordinates:g});break}case"Track":case"gx:Track":{const g=hg(l);if(!g)break;const{times:A,geometry:b}=g;C.push(b),A.length&&I.push(A);break}}}return{geometries:C,coordTimes:I}}function pg(g){return 0===g.length?null:1===g.length?g[0]:{type:"GeometryCollection",geometries:g}}function Hg(g,C,I){const{coordTimes:A,geometries:l}=Xg(g),b={type:"Feature",geometry:pg(l),properties:Object.assign(x(g,["name","address","visibility","open","phoneNumber","description"]),Bg(g),Jg(g,C),eg(g),mg(g,I),ig(g),Wg(g),A.length?{coordinateProperties:{times:1===A.length?A[0]:A}}:{})};void 0!==b.properties?.visibility&&(b.properties.visibility="0"!==b.properties.visibility);const c=g.getAttribute("id");return null!==c&&""!==c&&(b.id=c),b}function Yg(g){if(F(g,"gx:LatLonQuad")){return{type:"Polygon",coordinates:[yg(ug(Vg(g)))]}}return function(g){const C=F(g,"LatLonBox");if(C){const g=f(C,"north"),I=f(C,"west"),A=f(C,"east"),l=f(C,"south"),b=f(C,"rotation");if("number"==typeof g&&"number"==typeof l&&"number"==typeof I&&"number"==typeof A){let C=[[[I,g],[A,g],[A,l],[I,l],[I,g]]];return"number"==typeof b&&(C=function(g,C,I){const A=[(g[0]+g[2])/2,(g[1]+g[3])/2];return[C[0].map((g=>{const C=g[1]-A[1],l=g[0]-A[0],b=Math.sqrt(Math.pow(C,2)+Math.pow(l,2)),c=Math.atan2(C,l)-I*Rg;return[A[0]+Math.cos(c)*b,A[1]+Math.sin(c)*b]}))]}([I,l,A,g],C,b)),{type:"Polygon",coordinates:C}}}return null}(g)}const Rg=Math.PI/180;function rg(g,C,I){const A={type:"Feature",geometry:Yg(g),properties:Object.assign({"@geometry-type":"groundoverlay"},x(g,["name","address","visibility","open","phoneNumber","description"]),Bg(g),Jg(g,C),eg(g),sg(g),mg(g,I),ig(g),Wg(g))};void 0!==A.properties?.visibility&&(A.properties.visibility="0"!==A.properties.visibility);const l=g.getAttribute("id");return null!==l&&""!==l&&(A.id=l),A}function wg(g){let C=g.getAttribute("id");const I=g.parentNode;return!C&&Q(I)&&"CascadingStyle"===I.localName&&(C=I.getAttribute("kml:id")||I.getAttribute("id")),w(C||"")}function vg(g){const C={};for(const I of r(g,"Style"))C[wg(I)]=eg(I);for(const I of r(g,"StyleMap")){const g=w(I.getAttribute("id")||"");z(I,"styleUrl",(I=>{I=w(I),C[I]&&(C[g]=C[I])}))}return C}function Fg(g){const C={};for(const I of r(g,"SimpleField"))C[I.getAttribute("name")||""]=tg[I.getAttribute("type")||""]||tg.string;return C}const Ng=["name","visibility","open","address","description","phoneNumber","visibility"];function*zg(g){const C=vg(g),I=Fg(g);for(const A of r(g,"Placemark")){const g=Hg(A,C,I);g&&(yield g)}for(const A of r(g,"GroundOverlay")){const g=rg(A,C,I);g&&(yield g)}}var Lg=Object.freeze({__proto__:null,gpx:function(g){return{type:"FeatureCollection",features:Array.from($(g))}},gpxGen:$,kml:function(g){return{type:"FeatureCollection",features:Array.from(zg(g))}},kmlGen:zg,kmlWithFolders:function(g){const C=vg(g),I=Fg(g),A={type:"root",children:[]};return function g(A,l){if(Q(A))switch(A.tagName){case"GroundOverlay":{const g=rg(A,C,I);g&&l.children.push(g);break}case"Placemark":{const g=Hg(A,C,I);g&&l.children.push(g);break}case"Folder":{const g=function(g){const C={};for(const I of Array.from(g.childNodes))Q(I)&&Ng.includes(I.tagName)&&(C[I.tagName]=v(I));return{type:"folder",meta:C,children:[]}}(A);l.children.push(g),l=g;break}}if(A.childNodes)for(let C=0;C<A.childNodes.length;C++)g(A.childNodes[C],l)}(g,A),A},tcx:function(g){return{type:"FeatureCollection",features:Array.from(og(g))}},tcxGen:og}),fg=(()=>{const g=g=>g[0],C=g=>g[g.length-1],I=g=>g.join(","),A=(g,C,I)=>{let A=g[C];A?A.push(I):g[C]=[I]},l=(g,C,I)=>{let A=g[C],l=null;A&&(l=A.indexOf(I))>=0&&A.splice(l,1)},b=(g,C)=>{let I=g[C];return I&&I.length>0?I[0]:null},c=A=>A.length>3&&I(g(A))===I(C(A)),o=(g,C,I)=>{C=C||0,I=I||1;let A=g.reduce(((I,A,l)=>g[I][C]>A[C]?I:l),0),l=A<=0?g.length-2:A-1,b=A>=g.length-1?1:A+1,c=g[l][C],o=g[A][C],Z=g[b][C],d=g[l][I],G=g[A][I];return(o-c)*(g[b][I]-d)-(Z-c)*(G-d)<0?"clockwise":"counterclockwise"},Z=g=>g instanceof Array?g.map(Z):parseFloat(g);class d extends Map{constructor(){super(),this.binders=[]}add(g,C){this.has(g)||this.set(g,C)}addBinder(g){this.binders.push(g)}bindAll(){this.binders.forEach((g=>g.bind()))}}return{purgeProps:(g,C)=>{if(g){let I=Object.assign({},g);if(C)for(let g of C)delete I[g];return I}return{}},mergeProps:(g,C)=>(g=g||{},C=C||{},Object.assign(g,C)),first:g,last:C,coordsToKey:I,addToMap:A,removeFromMap:l,getFirstFromMap:b,isRing:c,ringDirection:o,ptInsidePolygon:(g,C,I,A)=>{I=I||0,A=A||1;let l=!1;for(let b=0,c=C.length-1;b<C.length;c=b++)(C[b][I]<=g[I]&&g[I]<C[c][I]||C[c][I]<=g[I]&&g[I]<C[b][I])&&g[A]<(C[c][A]-C[b][A])*(g[I]-C[b][I])/(C[c][I]-C[b][I])+C[b][A]&&(l=!l);return l},strToFloat:Z,RefElements:d,LateBinder:class{constructor(g,C,I,A){this.container=g,this.valueFunc=C,this.ctx=I,this.args=A}bind(){let g=this.valueFunc.apply(this.ctx,this.args);if(this.container instanceof Array){let C=this.container.indexOf(this);if(C>=0){let I=[C,1];g&&I.push(g),[].splice.apply(this.container,I)}}else if("object"==typeof this.container){let C=Object.keys(this.container).find((g=>this.container[g]===this));C&&(g?this.container[C]=g:delete this.container[C])}}},WayCollection:class extends Array{constructor(){super(),this.firstMap={},this.lastMap={}}addWay(l){(l=l.toCoordsArray()).length>0&&(this.push(l),A(this.firstMap,I(g(l)),l),A(this.lastMap,I(C(l)),l))}toStrings(){let A=[],c=null;for(;c=this.shift();){l(this.firstMap,I(g(c)),c),l(this.lastMap,I(C(c)),c);let o=c,d=null;do{let A=I(C(o)),c=!1;d=b(this.firstMap,A),d||(d=b(this.lastMap,A),c=!0),d&&(this.splice(this.indexOf(d),1),l(this.firstMap,I(g(d)),d),l(this.lastMap,I(C(d)),d),c&&(d.length>o.length&&([o,d]=[d,o]),d.reverse()),o=o.concat(d.slice(1)))}while(d);A.push(Z(o))}return A}toRings(g){let C=this.toStrings(),I=[],A=null;for(;A=C.shift();)c(A)&&(o(A)!==g&&A.reverse(),I.push(A));return I}}}})(),xg={building:{},highway:{whitelist:["services","rest_area","escape","elevator"]},natural:{blacklist:["coastline","cliff","ridge","arete","tree_row"]},landuse:{},waterway:{whitelist:["riverbank","dock","boatyard","dam"]},amenity:{},leisure:{},barrier:{whitelist:["city_wall","ditch","hedge","retaining_wall","wall","spikes"]},railway:{whitelist:["station","turntable","roundhouse","platform"]},area:{},boundary:{},man_made:{blacklist:["cutline","embankment","pipeline"]},power:{whitelist:["plant","substation","generator","transformer"]},place:{},shop:{},aeroway:{blacklist:["taxiway"]},tourism:{},historic:{},public_transport:{},office:{},"building:part":{},military:{},ruins:{},"area:highway":{},craft:{},golf:{},indoor:{}},Qg=(()=>{const{first:g,last:C,coordsToKey:I,addToMap:A,removeFromMap:l,getFirstFromMap:b,isRing:c,ringDirection:o,ptInsidePolygon:Z,strToFloat:d,LateBinder:G,WayCollection:s}=fg,e=xg;class n{constructor(g,C,I){this.type=g,this.id=C,this.refElems=I,this.tags={},this.props={id:this.getCompositeId()},this.refCount=0,this.hasTag=!1,I&&I.add(this.getCompositeId(),this)}addTags(g){this.tags=Object.assign(this.tags,g),this.hasTag=!!g}addTag(g,C){this.tags[g]=C,this.hasTag=!!g}addProp(g,C){this.props[g]=C}addProps(g){this.props=Object.assign(this.props,g)}getCompositeId(){return`${this.type}/${this.id}`}getProps(){return Object.assign(this.props,this.tags)}toFeatureArray(){return[]}}class t extends n{constructor(g,C){super("node",g,C),this.latLng=null}setLatLng(g){this.latLng=g}toFeatureArray(){return this.latLng?[{type:"Feature",id:this.getCompositeId(),properties:this.getProps(),geometry:{type:"Point",coordinates:d([this.latLng.lon,this.latLng.lat])}}]:[]}getLatLng(){return this.latLng}}class m extends n{constructor(g,C){super("way",g,C),this.latLngArray=[],this.isPolygon=!1}addLatLng(g){this.latLngArray.push(g)}setLatLngArray(g){this.latLngArray=g}addNodeRef(g){let C=new G(this.latLngArray,(function(g){let C=this.refElems.get(`node/${g}`);if(C)return C.refCount++,C.getLatLng()}),this,[g]);this.latLngArray.push(C),this.refElems.addBinder(C)}analyzeTag(g,C){let I=e[g];I&&(this.isPolygon=!0,I.whitelist?this.isPolygon=I.whitelist.indexOf(C)>=0:I.blacklist&&(this.isPolygon=!(I.blacklist.indexOf(C)>=0)))}addTags(g){super.addTags(g);for(let[C,I]of Object.entries(g))this.analyzeTag(C,I)}addTag(g,C){super.addTag(g,C),this.analyzeTag(g,C)}toCoordsArray(){return this.latLngArray.map((g=>[g.lon,g.lat]))}toFeatureArray(){let g=this.toCoordsArray();if(g.length>1){g=d(g);let C={type:"Feature",id:this.getCompositeId(),properties:this.getProps(),geometry:{type:"LineString",coordinates:g}};return this.isPolygon&&c(g)?("counterclockwise"!==o(g)&&g.reverse(),C.geometry={type:"Polygon",coordinates:[g]},[C]):[C]}return[]}}return{Node:t,Way:m,Relation:class extends n{constructor(g,C){super("relation",g,C),this.relations=[],this.nodes=[],this.bounds=null}setBounds(g){this.bounds=g}addMember(g){switch(g.type){case"relation":let C=new G(this.relations,(function(g){let C=this.refElems.get(`relation/${g}`);if(C)return C.refCount++,C}),this,[g.ref]);this.relations.push(C),this.refElems.addBinder(C);break;case"way":g.role||(g.role="");let I=this[g.role];if(I||(I=this[g.role]=[]),g.geometry){let C=new m(g.ref,this.refElems);C.setLatLngArray(g.geometry),C.refCount++,I.push(C)}else if(g.nodes){let C=new m(g.ref,this.refElems);for(let I of g.nodes)C.addNodeRef(I);C.refCount++,I.push(C)}else{let C=new G(I,(function(g){let C=this.refElems.get(`way/${g}`);if(C)return C.refCount++,C}),this,[g.ref]);I.push(C),this.refElems.addBinder(C)}break;case"node":let A=null;if(g.lat&&g.lon){A=new t(g.ref,this.refElems),A.setLatLng({lon:g.lon,lat:g.lat}),g.tags&&A.addTags(g.tags);for(let[C,I]of Object.entries(g))["id","type","lat","lon"].indexOf(C)<0&&A.addProp(C,I);A.refCount++,this.nodes.push(A)}else{let C=new G(this.nodes,(function(g){let C=this.refElems.get(`node/${g}`);if(C)return C.refCount++,C}),this,[g.ref]);this.nodes.push(C),this.refElems.addBinder(C)}}}toFeatureArray(){let C=[],I=[],A=[];const l=["outer","inner",""];for(let g of this.relations)if(g)for(let C of l){let I=g[C];if(I){let g=this[C];g?[].splice.apply(g,[g.length,0].concat(I)):this[C]=I}}for(let g of l){let C=this[g];if(C){this[g]=new s;for(let I of C)this[g].addWay(I)}}let b=null,c={type:"Feature",id:this.getCompositeId(),bbox:this.bounds,properties:this.getProps()};this.bounds||delete c.bbox,this.outer?(b=((C,I)=>{let A=C?C.toRings("counterclockwise"):[],l=I?I.toRings("clockwise"):[];if(A.length>0){let C=[],I=null;for(I of A)C.push([I]);for(;I=l.shift();)for(let l in A)if(Z(g(I),A[l])){C[l].push(I);break}return 1===C.length?{type:"Polygon",coordinates:C[0]}:{type:"MultiPolygon",coordinates:C}}return null})(this.outer,this.inner),b&&(c.geometry=b,C.push(c))):this[""]&&(b=(g=>{let C=g?g.toStrings():[];return C.length>0?1===C.length?{type:"LineString",coordinates:C[0]}:{type:"MultiLineString",coordinates:C}:null})(this[""]),b&&(c.geometry=b,I.push(c)));for(let g of this.nodes)A=A.concat(g.toFeatureArray());return C.concat(I).concat(A)}}}})(),Tg=(()=>{function g(g){return null!=g.match(/^(.+?)\[(.+?)\]>$/g)}function C(g){let C=/^(.+?)\[(.+?)\]>$/g.exec(g);return C?{evt:C[1]+">",exp:C[2]}:{evt:g}}return class{constructor(g){g&&(this.queryParent=!!g.queryParent,this.progressive=g.progressive,this.queryParent&&(this.parentMap=new WeakMap)),this.evtListeners={}}parse(g,C,I){I=I?I+".":"";let A=/<([^ >\/]+)(.*?)>/gm,l=null,b=[];for(;l=A.exec(g);){let c=l[1],o={$tag:c},Z=I+c,d=l[2].trim(),G=!1;(d.endsWith("/")||c.startsWith("?")||c.startsWith("!"))&&(G=!0);let s=/([^ ]+?)="(.+?)"/g,e=/([^ ]+?)='(.+?)'/g,n=null,t=!1;for(;n=s.exec(d);)t=!0,o[n[1]]=n[2];if(!t)for(;n=e.exec(d);)t=!0,o[n[1]]=n[2];if(t||""===d||(o.text=d),this.progressive&&this.emit(`<${Z}>`,o,C),!G){let C=new RegExp(`([^]+?)</${c}>`,"g");C.lastIndex=A.lastIndex;let I=C.exec(g);if(I&&I[1]){A.lastIndex=C.lastIndex;let g=this.parse(I[1],o,Z);g.length>0?o.$innerNodes=g:o.$innerText=I[1]}}this.queryParent&&C&&this.parentMap.set(o,C),this.progressive&&this.emit(`</${Z}>`,o,C),b.push(o)}return b}getParent(g){return this.queryParent?this.parentMap.get(g):null}$addListener(g,C){let I=this.evtListeners[g];I?I.push(C):this.evtListeners[g]=[C]}addListener(I,A){g(I)&&(I=C(I),A.condition=function(g){let C="return "+g.replace(/(\$.+?)(?=[=!.])/g,"node.$&")+";";return new Function("node",C)}(I.exp),I=I.evt),this.$addListener(I,A)}$removeListener(g,C){let I=this.evtListeners[g],A=null;I&&(A=I.indexOf(C))>=0&&I.splice(A,1)}removeListener(I,A){g(I)&&(I=(I=C(I)).evt),this.$removeListener(I,A)}emit(g,...C){let I=this.evtListeners[g];if(I)for(let g of I)g.condition?!0===g.condition.apply(null,C)&&g.apply(null,C):g.apply(null,C)}on(g,C){this.addListener(g,C)}off(g,C){this.removeListener(g,C)}}})();const{Node:Ug,Way:Mg,Relation:Og}=Qg,{purgeProps:jg,RefElements:Dg}=fg,Pg=Tg;var Eg=(g,C)=>{let I=!1,A=!1,l=!0;(g=>{if(g){I=!(!g.completeFeature&&!g.allFeatures),A=!!g.renderTagged;let C=g.suppressWay||g.excludeWay;void 0===C||C||(l=!1)}})(C);let b=(g=>g.elements?"json":g.indexOf("<osm")>=0?"xml":g.trim().startsWith("{")?"json-raw":"invalid")(g),c=new Dg,o=[];"json-raw"===b&&(b=(g=JSON.parse(g)).elements?"json":"invalid"),"json"===b?(g=>{for(let C of g.elements)switch(C.type){case"node":let g=new Ug(C.id,c);C.tags&&g.addTags(C.tags),g.addProps(jg(C,["id","type","tags","lat","lon"])),g.setLatLng(C);break;case"way":let I=new Mg(C.id,c);if(C.tags&&I.addTags(C.tags),I.addProps(jg(C,["id","type","tags","nodes","geometry"])),C.nodes)for(let g of C.nodes)I.addNodeRef(g);else C.geometry&&I.setLatLngArray(C.geometry);break;case"relation":let A=new Og(C.id,c);if(C.bounds&&A.setBounds([parseFloat(C.bounds.minlon),parseFloat(C.bounds.minlat),parseFloat(C.bounds.maxlon),parseFloat(C.bounds.maxlat)]),C.tags&&A.addTags(C.tags),A.addProps(jg(C,["id","type","tags","bounds","members"])),C.members)for(let g of C.members)A.addMember(g)}})(g):"xml"===b&&(g=>{const C=new Pg({progressive:!0});C.on("</osm.node>",(g=>{let C=new Ug(g.id,c);for(let[I,A]of Object.entries(g))!I.startsWith("$")&&["id","lon","lat"].indexOf(I)<0&&C.addProp(I,A);if(C.setLatLng(g),g.$innerNodes)for(let I of g.$innerNodes)"tag"===I.$tag&&C.addTag(I.k,I.v)})),C.on("</osm.way>",(g=>{let C=new Mg(g.id,c);for(let[I,A]of Object.entries(g))!I.startsWith("$")&&["id"].indexOf(I)<0&&C.addProp(I,A);if(g.$innerNodes)for(let I of g.$innerNodes)"nd"===I.$tag?I.lon&&I.lat?C.addLatLng(I):I.ref&&C.addNodeRef(I.ref):"tag"===I.$tag&&C.addTag(I.k,I.v)})),C.on("<osm.relation>",(g=>{new Og(g.id,c)})),C.on("</osm.relation.member>",((g,C)=>{let I=c.get(`relation/${C.id}`),A={type:g.type,role:g.role?g.role:"",ref:g.ref};if(g.lat&&g.lon){A.lat=g.lat,A.lon=g.lon,A.tags={};for(let[C,I]of Object.entries(g))!C.startsWith("$")&&["type","lat","lon"].indexOf(C)<0&&(A[C]=I)}if(g.$innerNodes){let C=[],I=[];for(let A of g.$innerNodes)A.lat&&A.lon?C.push(A):I.push(A.ref);C.length>0?A.geometry=C:I.length>0&&(A.nodes=I)}I.addMember(A)})),C.on("</osm.relation.bounds>",((g,C)=>{c.get(`relation/${C.id}`).setBounds([parseFloat(g.minlon),parseFloat(g.minlat),parseFloat(g.maxlon),parseFloat(g.maxlat)])})),C.on("</osm.relation.tag>",((g,C)=>{c.get(`relation/${C.id}`).addTag(g.k,g.v)})),C.parse(g)})(g),c.bindAll();for(let g of c.values())if(g.refCount<=0||g.hasTag&&A&&!(g instanceof Mg&&l)){let C=g.toFeatureArray();if(g instanceof Og&&!I&&C.length>0)return C[0].geometry;o=o.concat(C)}return{type:"FeatureCollection",features:o}},qg=C(Eg);const _g=["topojson","osm","kml","gpx","tcx","csv","tsv"];class $g{constructor(g,C){this.blankGeoJSON=()=>({type:"FeatureCollection",features:[]}),this._rawData=C,this._format=g;const I={topojson:this.loadTopoJson,osm:this.loadOsm,kml:this.loadXml,gpx:this.loadXml,tcx:this.loadXml,csv:this.loadCsv,tsv:this.loadCsv};this._conversionFn=I[g]}async convert(){return this._conversionFn?this._conversionFn():new Promise(((g,C)=>C(`No converter exists for ${this._format}`)))}async loadXml(){return Lg[this._format]((new DOMParser).parseFromString(this._rawData,"text/xml"))}async loadCsv(){let g={};"tsv"===this._format&&(g.delimiter="\t");return await new Promise(((C,I)=>{H.csv2geojson(this._rawData,g,((g,A)=>{g?I(g):C(A)}))}))}async loadTopoJson(){let g={};try{g=JSON.parse(this._rawData)}catch(g){throw"Invalid TopoJson"}let C=this.blankGeoJSON();return"Topology"===g.type&&void 0!==g.objects&&(C={type:"FeatureCollection",features:C.features=Object.keys(g.objects).map((C=>{return I=g,"string"==typeof(A=C)&&(A=I.objects[A]),"GeometryCollection"===A.type?{type:"FeatureCollection",features:A.geometries.map((function(g){return R(I,g)}))}:R(I,A);var I,A})).reduce(((g,C)=>[...g,...C.features]),[])}),C}async loadOsm(){return qg(this._rawData)}}var gC=null;try{var CC="undefined"!=typeof module&&"function"==typeof module.require&&module.require("worker_threads")||"function"==typeof __non_webpack_require__&&__non_webpack_require__("worker_threads")||"function"==typeof require&&require("worker_threads");gC=CC.Worker}catch(g){}function IC(g,C,I){var A=void 0===C?null:C,l=function(g,C){return Buffer.from(g,"base64").toString(C?"utf16":"utf8")}(g,void 0!==I&&I),b=l.indexOf("\n",10)+1,c=l.substring(b)+(A?"//# sourceMappingURL="+A:"");return function(g){return new gC(c,Object.assign({},g,{eval:!0}))}}function AC(g,C,I){var A=void 0===C?null:C,l=function(g,C){var I=atob(g);if(C){for(var A=new Uint8Array(I.length),l=0,b=I.length;l<b;++l)A[l]=I.charCodeAt(l);return String.fromCharCode.apply(null,new Uint16Array(A.buffer))}return I}(g,void 0!==I&&I),b=l.indexOf("\n",10)+1,c=l.substring(b)+(A?"//# sourceMappingURL="+A:""),o=new Blob([c],{type:"application/javascript"});return URL.createObjectURL(o)}var lC="[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0);var bC,cC,oC,ZC=(bC="",cC=null,oC=!1,lC?IC(bC,cC,oC):function(g,C,I){var A;return function(l){return A=A||AC(g,C,I),new Worker(A,l)}}(bC,cC,oC));const dC=()=>Math.random().toString(36).substring(2);class GC{constructor(g,C){this.initId=dC()+"-"+g,this.worker=new ZC,this.handlers=new Map,this.worker.onmessage=C=>{const I=C.data,A=this.handlers.get(I.id),l=this;if(A){if("response"===I.type&&A.resolve(I.message),"error"===I.type){const C=I.error||new Error(`Unknown error with ${g}`);A.reject(C)}"init_response"===I.type&&(this._=Object.keys(I.message).map((g=>{const C="function"==typeof I.message[g];return[g,function(){return C?l.exec(g)(...arguments):l.get(g)}]})).reduce(((g,C)=>({...g,[C[0]]:C[1]})),{}),A.resolve(this._))}},this.worker.postMessage({type:"init",id:this.initId,command:g,message:C})}onLoad(){return new Promise((g=>{void 0===this._?this.handlers.set(this.initId,{resolve:g,reject:g}):g(this._)}))}exec(g){const C=this;return function(...I){return new Promise(((A,l)=>{const b=dC()+"-"+g;C.handlers.set(b,{resolve:A,reject:l}),C.worker.postMessage({type:"exec",id:b,command:g,message:[...I]})}))}}get(g){return new Promise(((C,I)=>{const A=dC()+"-"+g;this.handlers.set(A,{resolve:C,reject:I}),this.worker.postMessage({type:"get",id:A,command:g,message:[]})}))}}const sC="test://http://example.com"!==new URL("test://http://example.com").href;async function eC(g,C,I){const A=await fetch(g,I?{signal:I.signal}:void 0);if(200==A.status){const g=await A.text();let I,l;return["kml","tcx","gpx"].indexOf(C)>=0||!(()=>{let g=!1;try{g="function"==typeof window.Worker}catch(C){g=!1}return g})()?(I=new $g(C,g),l=I.convert()):(I=new GC("Converter",[C,g]),l=I.exec("convert")()),await l}throw new Error(`Data fetch error: ${A.statusText}`)}const nC=(g,C)=>{const I=new AbortController,A=g.url.split("://")[0],l=g.url.replace(new RegExp(`^${A}://`),""),b=sC?(g=>{const C=new RegExp("^(https?)(//)");return g.replace(C,"$1:$2")})(l):l;return b&&eC(b,A,I).then((g=>C(null,g))).catch((g=>C(g))),{cancel:()=>{I.abort()}}};g.VectorTextProtocol=nC,g.addProtocols=g=>{_g.forEach((C=>{g.addProtocol(C,nC)}))},Object.defineProperty(g,"__esModule",{value:!0})}));
//# sourceMappingURL=maplibre-gl-vector-text-protocol.min.js.map
